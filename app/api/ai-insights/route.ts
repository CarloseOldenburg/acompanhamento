import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"
import type { DashboardData } from "../../../types"

// Cache para evitar requisi√ß√µes desnecess√°rias
const analysisCache = new Map<string, any>()
const statusHashCache = new Map<string, string>()
const CACHE_DURATION = 15 * 60 * 1000 // 15 minutos (aumentado)

// Fun√ß√£o para gerar hash espec√≠fico dos STATUS (n√£o dos dados completos)
function generateStatusHash(statusCounts: Record<string, number>): string {
  const statusString = Object.entries(statusCounts)
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([status, count]) => `${status}:${count}`)
    .join("|")
  return btoa(statusString).slice(0, 12)
}

// Fun√ß√£o para gerar hash dos dados completos
function generateDataHash(data: DashboardData): string {
  const key = `${data.totalRecords}-${JSON.stringify(data.statusCounts)}-${data.dashboardType}`
  return btoa(key).slice(0, 16)
}

export async function POST(request: NextRequest) {
  try {
    const { data, forceRefresh = false }: { data: DashboardData; forceRefresh?: boolean } = await request.json()

    const dataHash = generateDataHash(data)
    const statusHash = generateStatusHash(data.statusCounts)
    const now = Date.now()

    // Verificar se os STATUS mudaram (otimiza√ß√£o principal)
    const lastStatusHash = statusHashCache.get(data.tabId || "default")
    const statusChanged = lastStatusHash !== statusHash

    console.log(`üìä An√°lise para ${data.tabName}:`)
    console.log(`- Status hash atual: ${statusHash}`)
    console.log(`- Status hash anterior: ${lastStatusHash}`)
    console.log(`- Status mudaram: ${statusChanged}`)

    // Verificar cache primeiro
    const cached = analysisCache.get(dataHash)
    if (!forceRefresh && cached && now - cached.timestamp < CACHE_DURATION && !statusChanged) {
      console.log("üéØ Usando an√°lise em cache - status n√£o mudaram")
      return NextResponse.json({ success: true, analysis: cached, fromCache: true })
    }

    // Se status n√£o mudaram e temos an√°lise recente, usar an√°lise local otimizada
    if (!forceRefresh && !statusChanged && cached) {
      console.log("üìä Status n√£o mudaram - usando an√°lise local otimizada")
      const localAnalysis = generateContextualLocalAnalysis(data)
      analysisCache.set(dataHash, localAnalysis)
      return NextResponse.json({ success: true, analysis: localAnalysis, fromLocal: true })
    }

    // Verificar se a API key est√° dispon√≠vel
    const apiKey = process.env.OPENAI_API_KEY
    if (!apiKey) {
      console.log("‚ùå OPENAI_API_KEY n√£o configurada, usando an√°lise local")
      const localAnalysis = generateContextualLocalAnalysis(data)
      return NextResponse.json({ success: true, analysis: localAnalysis, fromLocal: true })
    }

    console.log("ü§ñ STATUS MUDARAM - Fazendo requisi√ß√£o √† IA com contexto espec√≠fico")

    // Atualizar hash dos status
    statusHashCache.set(data.tabId || "default", statusHash)

    const isRollout = data.dashboardType === "rollout"
    const isTesting = data.dashboardType === "testing"

    // Calcular m√©tricas b√°sicas
    const total = data.totalRecords
    const completed =
      (data.statusCounts["Conclu√≠do"] || 0) +
      (data.statusCounts["Concluido"] || 0) +
      (data.statusCounts["Aprovado"] || 0)
    const pending = (data.statusCounts["Pendente"] || 0) + (data.statusCounts["Aguardando"] || 0)
    const errors = data.statusCounts["Erro"] || 0
    const noResponse = (data.statusCounts["Sem retorno"] || 0) + (data.statusCounts["Sem Retorno"] || 0)
    const inProgress = (data.statusCounts["Agendado"] || 0) + (data.statusCounts["Em Andamento"] || 0)

    const completionRate = total > 0 ? (completed / total) * 100 : 0
    const errorRate = total > 0 ? (errors / total) * 100 : 0
    const noResponseRate = total > 0 ? (noResponse / total) * 100 : 0

    // Prompt contextualizado baseado no tipo de processo
    let contextualPrompt = ""
    let systemPrompt = ""

    if (isRollout) {
      contextualPrompt = `
      CONTEXTO: ROLLOUT DE MIGRA√á√ÉO DE SISTEMA
      Este √© um processo de migra√ß√£o de ${total} lojas do sistema antigo para o novo sistema.
      
      üìä SITUA√á√ÉO ATUAL:
      - Total de lojas: ${total}
      - Migradas (Conclu√≠do): ${completed} (${completionRate.toFixed(1)}%)
      - Agendadas: ${inProgress}
      - Pendentes: ${pending}
      - Sem retorno: ${noResponse} (${noResponseRate.toFixed(1)}%)
      - Erros: ${errors}

      CARACTER√çSTICAS DO ROLLOUT:
      - Processo de migra√ß√£o √∫nica por loja
      - Cada loja s√≥ muda de status uma vez
      - "Sem retorno" indica falta de comunica√ß√£o/confirma√ß√£o
      - Meta: 100% das lojas migradas
      - Criticidade: Sem retorno > 30% √© cr√≠tico para cronograma

      Analise como especialista em rollout de sistemas:
      `

      systemPrompt = "Especialista em rollout e migra√ß√£o de sistemas com foco em cronograma e comunica√ß√£o."
    } else if (isTesting) {
      contextualPrompt = `
      CONTEXTO: TESTES DE INTEGRA√á√ÉO CONT√çNUOS
      Este √© um processo cont√≠nuo de valida√ß√£o de integra√ß√£o entre sistema VS e PDVs de restaurantes.
      
      üìä SITUA√á√ÉO ATUAL:
      - Total de testes: ${total}
      - Conclu√≠dos: ${completed} (${completionRate.toFixed(1)}%)
      - Agendados: ${inProgress}
      - Pendentes: ${pending}
      - Sem retorno: ${noResponse} (${noResponseRate.toFixed(1)}%)
      - Erros: ${errors} (${errorRate.toFixed(1)}%)

      CARACTER√çSTICAS DOS TESTES:
      - Processo cont√≠nuo (novos testes sempre chegando)
      - Valida√ß√£o de integra√ß√£o VS ‚Üî PDV
      - "Sem retorno" indica problemas de comunica√ß√£o com restaurantes
      - "Erro" indica falha t√©cnica na integra√ß√£o
      - Meta: < 5% erros, < 15% sem retorno
      - Criticidade: Erros t√©cnicos s√£o mais cr√≠ticos que sem retorno

      Analise como especialista em testes de integra√ß√£o:
      `

      systemPrompt = "Especialista em testes de integra√ß√£o e valida√ß√£o de sistemas com foco em qualidade t√©cnica."
    }

    const fullPrompt = `${contextualPrompt}

    Forne√ßa an√°lise CONCISA e CONTEXTUAL em portugu√™s:
    1. Situa√ß√£o atual do processo (2 frases)
    2. Principal risco/oportunidade espec√≠fico (1 frase)
    3. A√ß√£o priorit√°ria contextual (1 frase)
    4. Previs√£o realista de conclus√£o
    5. Score 0-100 baseado no contexto

    Seja direto, pr√°tico e espec√≠fico para o tipo de processo.
    `

    // Configurar o modelo OpenAI
    const model = openai("gpt-4o-mini", {
      apiKey: apiKey,
    })

    const { text } = await generateText({
      model: model,
      prompt: fullPrompt,
      system: systemPrompt,
      maxTokens: 400,
    })

    // Processar resposta da IA e gerar insights estruturados
    const insights = generateContextualInsights(data, completionRate, errorRate, noResponseRate, isRollout, isTesting)
    const performanceScore = calculateContextualScore(
      completionRate,
      errorRate,
      noResponseRate,
      inProgress,
      total,
      isRollout,
    )
    const trend = determineContextualTrend(completionRate, errorRate, noResponseRate, isRollout)
    const completionEstimate = estimateContextualCompletion(completed, total, inProgress, isRollout, isTesting)
    const riskLevel = determineContextualRisk(errorRate, noResponseRate, completionRate, isRollout)

    const analysis = {
      summary: text,
      insights,
      predictions: {
        completionTimeEstimate: completionEstimate,
        riskLevel,
        nextActions: generateContextualActions(data, isRollout, isTesting, errorRate, noResponseRate, completionRate),
      },
      performance: {
        score: performanceScore,
        trend,
        benchmarkComparison: generateContextualBenchmark(performanceScore, isRollout, isTesting),
      },
      timestamp: now,
      dataHash,
    }

    // Salvar no cache
    analysisCache.set(dataHash, analysis)

    // Limpar cache antigo
    cleanupCache()

    return NextResponse.json({ success: true, analysis, fromAI: true, statusChanged })
  } catch (error: any) {
    console.error("Erro ao gerar insights da IA:", error)

    // Fallback com an√°lise local
    const { data } = await request.json()
    const localAnalysis = generateContextualLocalAnalysis(data) || generateFallbackAnalysis(data)

    return NextResponse.json({ success: true, analysis: localAnalysis, fromLocal: true, error: error.message })
  }
}

// An√°lise local contextualizada
function generateContextualLocalAnalysis(data: DashboardData) {
  try {
    const isRollout = data.dashboardType === "rollout"
    const isTesting = data.dashboardType === "testing"
    const total = data.totalRecords

    if (total === 0) return null

    const completed = (data.statusCounts["Conclu√≠do"] || 0) + (data.statusCounts["Concluido"] || 0)
    const errors = data.statusCounts["Erro"] || 0
    const noResponse = (data.statusCounts["Sem retorno"] || 0) + (data.statusCounts["Sem Retorno"] || 0)
    const inProgress = (data.statusCounts["Agendado"] || 0) + (data.statusCounts["Em Andamento"] || 0)

    const completionRate = (completed / total) * 100
    const errorRate = (errors / total) * 100
    const noResponseRate = (noResponse / total) * 100

    let summary = ""

    if (isRollout) {
      summary = `üè¢ An√°lise de Rollout: ${completed} de ${total} lojas migradas (${completionRate.toFixed(1)}%). `

      if (noResponseRate > 30) {
        summary += `üö® CR√çTICO: ${noResponseRate.toFixed(1)}% das lojas sem confirma√ß√£o compromete cronograma de migra√ß√£o. `
        summary += `A√ß√£o urgente: Contatar lojas pendentes e estabelecer prazo limite para migra√ß√£o.`
      } else if (completionRate > 80) {
        summary += `‚úÖ Migra√ß√£o avan√ßada! Foco nas ${total - completed} lojas restantes. `
        summary += `Recomenda√ß√£o: Acelerar √∫ltimas migra√ß√µes e preparar encerramento do sistema antigo.`
      } else if (completionRate < 50) {
        summary += `üìà Migra√ß√£o lenta (${completionRate.toFixed(1)}%). `
        summary += `Recomenda√ß√£o: Intensificar comunica√ß√£o e suporte √†s lojas para acelerar processo.`
      } else {
        summary += `üìä Migra√ß√£o em ritmo moderado. `
        summary += `Recomenda√ß√£o: Manter cronograma e focar em lojas com dificuldades.`
      }
    } else if (isTesting) {
      summary = `üîß An√°lise de Testes: ${completed} de ${total} testes conclu√≠dos (${completionRate.toFixed(1)}%). `

      if (errorRate > 10) {
        summary += `üö® CR√çTICO: ${errorRate.toFixed(1)}% de falhas t√©cnicas indica problemas graves de integra√ß√£o. `
        summary += `A√ß√£o urgente: Pausar novos testes e corrigir problemas de integra√ß√£o VS-PDV.`
      } else if (noResponseRate > 40) {
        summary += `‚ö†Ô∏è ALTO: ${noResponseRate.toFixed(1)}% sem retorno de restaurantes. `
        summary += `Recomenda√ß√£o: Melhorar comunica√ß√£o e follow-up com estabelecimentos.`
      } else if (errorRate === 0 && completionRate > 70) {
        summary += `‚úÖ Excelente qualidade! Sem erros t√©cnicos e boa taxa de conclus√£o. `
        summary += `Recomenda√ß√£o: Manter padr√£o de qualidade e documentar melhores pr√°ticas.`
      } else {
        summary += `üìä Processo de testes est√°vel. `
        summary += `Recomenda√ß√£o: Continuar monitoramento e otimizar casos pendentes.`
      }
    }

    if (errorRate > 0 && isTesting) {
      summary += ` ‚ö†Ô∏è ${errors} erro(s) t√©cnico(s) requer investiga√ß√£o imediata.`
    }

    if (inProgress > 0) {
      summary += ` üîÑ ${inProgress} ${isRollout ? "migra√ß√£o(√µes)" : "teste(s)"} em andamento.`
    }

    const insights = generateContextualInsights(data, completionRate, errorRate, noResponseRate, isRollout, isTesting)
    const performanceScore = calculateContextualScore(
      completionRate,
      errorRate,
      noResponseRate,
      inProgress,
      total,
      isRollout,
    )
    const trend = determineContextualTrend(completionRate, errorRate, noResponseRate, isRollout)
    const completionEstimate = estimateContextualCompletion(completed, total, inProgress, isRollout, isTesting)
    const riskLevel = determineContextualRisk(errorRate, noResponseRate, completionRate, isRollout)

    return {
      summary,
      insights,
      predictions: {
        completionTimeEstimate: completionEstimate,
        riskLevel,
        nextActions: generateContextualActions(data, isRollout, isTesting, errorRate, noResponseRate, completionRate),
      },
      performance: {
        score: performanceScore,
        trend,
        benchmarkComparison: generateContextualBenchmark(performanceScore, isRollout, isTesting),
      },
      timestamp: Date.now(),
      dataHash: generateDataHash(data),
    }
  } catch (error) {
    console.error("Erro na an√°lise local contextual:", error)
    return null
  }
}

function generateContextualInsights(
  data: DashboardData,
  completionRate: number,
  errorRate: number,
  noResponseRate: number,
  isRollout: boolean,
  isTesting: boolean,
) {
  const insights = []

  if (isRollout) {
    // Insights espec√≠ficos para ROLLOUT
    if (noResponseRate > 30) {
      insights.push({
        type: "danger",
        title: "Cronograma de Migra√ß√£o em Risco",
        message: `${noResponseRate.toFixed(1)}% das lojas sem confirma√ß√£o compromete o cronograma de rollout`,
        recommendation: "Estabelecer prazo limite e contatar lojas pendentes urgentemente",
        confidence: 95,
        priority: "high",
        metrics: { current: noResponseRate, target: 15, trend: "up" },
      })
    }

    if (completionRate >= 80) {
      insights.push({
        type: "success",
        title: "Migra√ß√£o Quase Completa",
        message: `${completionRate.toFixed(1)}% das lojas j√° migradas - reta final do rollout`,
        recommendation: "Focar nas lojas restantes e preparar desativa√ß√£o do sistema antigo",
        confidence: 90,
        priority: "medium",
        metrics: { current: completionRate, target: 100, trend: "up" },
      })
    } else if (completionRate < 50) {
      insights.push({
        type: "warning",
        title: "Migra√ß√£o Lenta",
        message: `Apenas ${completionRate.toFixed(1)}% das lojas migradas - ritmo abaixo do esperado`,
        recommendation: "Intensificar suporte e comunica√ß√£o para acelerar migra√ß√£o",
        confidence: 85,
        priority: "high",
        metrics: { current: completionRate, target: 80, trend: "stable" },
      })
    }
  } else if (isTesting) {
    // Insights espec√≠ficos para TESTES DE INTEGRA√á√ÉO
    if (errorRate > 10) {
      insights.push({
        type: "danger",
        title: "Falhas Cr√≠ticas de Integra√ß√£o",
        message: `${errorRate.toFixed(1)}% de erros t√©cnicos indica problemas graves na integra√ß√£o VS-PDV`,
        recommendation: "URGENTE: Pausar novos testes e corrigir problemas de integra√ß√£o",
        confidence: 98,
        priority: "high",
        metrics: { current: errorRate, target: 5, trend: "up" },
      })
    } else if (errorRate === 0) {
      insights.push({
        type: "success",
        title: "Integra√ß√£o Est√°vel",
        message: "Nenhum erro t√©cnico detectado - integra√ß√£o VS-PDV funcionando perfeitamente",
        recommendation: "Manter padr√£o de qualidade e documentar configura√ß√µes bem-sucedidas",
        confidence: 90,
        priority: "low",
        metrics: { current: errorRate, target: 5, trend: "stable" },
      })
    }

    if (noResponseRate > 40) {
      insights.push({
        type: "warning",
        title: "Comunica√ß√£o com Restaurantes",
        message: `${noResponseRate.toFixed(1)}% sem retorno indica problemas de comunica√ß√£o com estabelecimentos`,
        recommendation: "Melhorar follow-up e canais de comunica√ß√£o com restaurantes",
        confidence: 85,
        priority: "medium",
        metrics: { current: noResponseRate, target: 15, trend: "up" },
      })
    }

    if (completionRate > 70 && errorRate < 5) {
      insights.push({
        type: "success",
        title: "Processo de Testes Eficiente",
        message: `${completionRate.toFixed(1)}% de conclus√£o com baixa taxa de erros`,
        recommendation: "Processo funcionando bem - manter ritmo e padr√£o de qualidade",
        confidence: 88,
        priority: "low",
        metrics: { current: completionRate, target: 80, trend: "up" },
      })
    }
  }

  return insights
}

function calculateContextualScore(
  completionRate: number,
  errorRate: number,
  noResponseRate: number,
  inProgress: number,
  total: number,
  isRollout: boolean,
): number {
  let score = 0

  if (isRollout) {
    // Para rollout: foco em conclus√£o e comunica√ß√£o
    score += (completionRate / 100) * 50 // 50% do score
    score += Math.max(0, (100 - noResponseRate * 1.5) / 100) * 30 // 30% do score
    score += Math.max(0, (100 - errorRate * 3) / 100) * 20 // 20% do score
  } else {
    // Para testes: foco em qualidade t√©cnica
    score += (completionRate / 100) * 35 // 35% do score
    score += Math.max(0, (100 - errorRate * 4) / 100) * 40 // 40% do score (mais peso)
    score += Math.max(0, (100 - noResponseRate * 1.2) / 100) * 25 // 25% do score
  }

  return Math.round(Math.max(0, Math.min(100, score)))
}

function determineContextualTrend(
  completionRate: number,
  errorRate: number,
  noResponseRate: number,
  isRollout: boolean,
) {
  if (isRollout) {
    if (completionRate > 80 && noResponseRate < 20) return "improving"
    if (completionRate < 40 || noResponseRate > 40) return "declining"
  } else {
    if (completionRate > 70 && errorRate < 5 && noResponseRate < 20) return "improving"
    if (errorRate > 15 || noResponseRate > 50) return "declining"
  }
  return "stable"
}

function estimateContextualCompletion(
  completed: number,
  total: number,
  inProgress: number,
  isRollout: boolean,
  isTesting: boolean,
): string {
  if (total === 0) return "N√£o √© poss√≠vel estimar"

  const remaining = total - completed

  if (remaining <= 0) return "Conclu√≠do"

  if (isRollout) {
    // Rollout tem prazo definido
    const dailyRate = Math.max(2, Math.floor(completed / 10)) // Assumindo 10 dias de trabalho
    const daysRemaining = Math.ceil(remaining / dailyRate)

    if (daysRemaining <= 5) return `${daysRemaining} dias`
    if (daysRemaining <= 21) return `${Math.ceil(daysRemaining / 7)} semanas`
    return `${Math.ceil(daysRemaining / 30)} meses`
  } else if (isTesting) {
    // Testes s√£o cont√≠nuos
    return "Processo cont√≠nuo - novos testes sempre chegando"
  }

  return "Estimativa n√£o dispon√≠vel"
}

function determineContextualRisk(
  errorRate: number,
  noResponseRate: number,
  completionRate: number,
  isRollout: boolean,
): "low" | "medium" | "high" {
  if (isRollout) {
    if (noResponseRate > 40 || completionRate < 30) return "high"
    if (noResponseRate > 20 || completionRate < 60) return "medium"
    return "low"
  } else {
    if (errorRate > 15 || noResponseRate > 50) return "high"
    if (errorRate > 8 || noResponseRate > 30) return "medium"
    return "low"
  }
}

function generateContextualActions(
  data: DashboardData,
  isRollout: boolean,
  isTesting: boolean,
  errorRate: number,
  noResponseRate: number,
  completionRate: number,
): string[] {
  const actions: string[] = []

  if (isRollout) {
    if (noResponseRate > 30) {
      actions.push("URGENTE: Contatar todas as lojas sem confirma√ß√£o")
      actions.push("Estabelecer prazo limite para migra√ß√£o")
      actions.push("Preparar suporte intensivo para lojas com dificuldades")
    }

    if (completionRate > 80) {
      actions.push("Focar nas √∫ltimas lojas pendentes")
      actions.push("Preparar cronograma de desativa√ß√£o do sistema antigo")
      actions.push("Documentar li√ß√µes aprendidas do rollout")
    } else if (completionRate < 50) {
      actions.push("Intensificar comunica√ß√£o com lojas pendentes")
      actions.push("Aumentar equipe de suporte para migra√ß√£o")
      actions.push("Revisar processo de migra√ß√£o para otimizar")
    }

    actions.push("Monitorar lojas migradas para garantir estabilidade")
  } else if (isTesting) {
    if (errorRate > 10) {
      actions.push("CR√çTICO: Pausar novos testes at√© corrigir erros")
      actions.push("Investigar problemas de integra√ß√£o VS-PDV")
      actions.push("Revisar configura√ß√µes de conectividade")
    }

    if (noResponseRate > 40) {
      actions.push("Implementar follow-up autom√°tico com restaurantes")
      actions.push("Melhorar canais de comunica√ß√£o (WhatsApp, telefone)")
      actions.push("Criar guia de teste para restaurantes")
    }

    if (errorRate < 5 && completionRate > 70) {
      actions.push("Manter padr√£o de qualidade atual")
      actions.push("Documentar configura√ß√µes bem-sucedidas")
      actions.push("Otimizar processo para novos testes")
    }

    actions.push("Continuar monitoramento cont√≠nuo de qualidade")
  }

  return actions.slice(0, 6)
}

function generateContextualBenchmark(score: number, isRollout: boolean, isTesting: boolean): string {
  const processType = isRollout ? "rollouts de migra√ß√£o" : "projetos de testes de integra√ß√£o"

  if (score >= 85) {
    return `Excelente! Performance no top 10% dos ${processType}`
  } else if (score >= 70) {
    return `Bom desempenho, acima da m√©dia dos ${processType}`
  } else if (score >= 50) {
    return `Performance mediana comparado a ${processType} similares`
  } else if (score >= 30) {
    return `Abaixo da m√©dia, requer melhorias urgentes`
  } else {
    return `Performance cr√≠tica, necessita interven√ß√£o imediata`
  }
}

function generateFallbackAnalysis(data: DashboardData) {
  const total = data.totalRecords
  const completed = (data.statusCounts["Conclu√≠do"] || 0) + (data.statusCounts["Concluido"] || 0)
  const completionRate = total > 0 ? (completed / total) * 100 : 0
  const isRollout = data.dashboardType === "rollout"

  return {
    summary: `üìä An√°lise de Emerg√™ncia: ${completed} de ${total} ${isRollout ? "lojas migradas" : "testes conclu√≠dos"} (${completionRate.toFixed(1)}%). Sistema funcionando com an√°lise local.`,
    insights: [
      {
        type: "info",
        title: "An√°lise B√°sica Ativa",
        message: "Sistema funcionando com an√°lise local contextual",
        recommendation: "Aguardar reconex√£o com sistema de IA",
        confidence: 80,
        priority: "low",
      },
    ],
    predictions: {
      completionTimeEstimate: isRollout ? "Estimativa indispon√≠vel" : "Processo cont√≠nuo",
      riskLevel: "medium" as const,
      nextActions: ["Continuar monitoramento", "Aguardar reconex√£o com IA"],
    },
    performance: {
      score: Math.round(completionRate),
      trend: "stable" as const,
      benchmarkComparison: "An√°lise b√°sica ativa",
    },
    timestamp: Date.now(),
    dataHash: `fallback-${Date.now()}`,
  }
}

function cleanupCache() {
  const now = Date.now()
  for (const [key, analysis] of analysisCache.entries()) {
    if (now - analysis.timestamp > CACHE_DURATION * 2) {
      analysisCache.delete(key)
    }
  }
}

export async function DELETE() {
  analysisCache.clear()
  statusHashCache.clear()
  return NextResponse.json({ success: true, message: "Cache limpo" })
}
